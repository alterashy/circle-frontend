/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as dashboardRouteImport } from './routes/(dashboard)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as IndexImport } from './routes/index'
import { Route as dashboardSearchImport } from './routes/(dashboard)/search'
import { Route as dashboardFollowImport } from './routes/(dashboard)/follow'
import { Route as dashboardPostIdImport } from './routes/(dashboard)/$postId'
import { Route as authResetPasswordImport } from './routes/(auth)/reset-password'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as dashboardProfileIndexImport } from './routes/(dashboard)/profile/index'
import { Route as dashboardProfileProfileIdImport } from './routes/(dashboard)/profile/$profileId'

// Create/Update Routes

const dashboardRouteRoute = dashboardRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardSearchRoute = dashboardSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardFollowRoute = dashboardFollowImport.update({
  id: '/follow',
  path: '/follow',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardPostIdRoute = dashboardPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const authResetPasswordRoute = authResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

const dashboardProfileIndexRoute = dashboardProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardProfileProfileIdRoute = dashboardProfileProfileIdImport.update({
  id: '/profile/$profileId',
  path: '/profile/$profileId',
  getParentRoute: () => dashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(dashboard)/$postId': {
      id: '/(dashboard)/$postId'
      path: '/$postId'
      fullPath: '/$postId'
      preLoaderRoute: typeof dashboardPostIdImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/follow': {
      id: '/(dashboard)/follow'
      path: '/follow'
      fullPath: '/follow'
      preLoaderRoute: typeof dashboardFollowImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/search': {
      id: '/(dashboard)/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof dashboardSearchImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/profile/$profileId': {
      id: '/(dashboard)/profile/$profileId'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof dashboardProfileProfileIdImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/profile/': {
      id: '/(dashboard)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof dashboardProfileIndexImport
      parentRoute: typeof dashboardRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  authResetPasswordRoute: authResetPasswordRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface dashboardRouteRouteChildren {
  dashboardPostIdRoute: typeof dashboardPostIdRoute
  dashboardFollowRoute: typeof dashboardFollowRoute
  dashboardSearchRoute: typeof dashboardSearchRoute
  dashboardProfileProfileIdRoute: typeof dashboardProfileProfileIdRoute
  dashboardProfileIndexRoute: typeof dashboardProfileIndexRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardPostIdRoute: dashboardPostIdRoute,
  dashboardFollowRoute: dashboardFollowRoute,
  dashboardSearchRoute: dashboardSearchRoute,
  dashboardProfileProfileIdRoute: dashboardProfileProfileIdRoute,
  dashboardProfileIndexRoute: dashboardProfileIndexRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof dashboardRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/reset-password': typeof authResetPasswordRoute
  '/$postId': typeof dashboardPostIdRoute
  '/follow': typeof dashboardFollowRoute
  '/search': typeof dashboardSearchRoute
  '/profile/$profileId': typeof dashboardProfileProfileIdRoute
  '/profile': typeof dashboardProfileIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof dashboardRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/reset-password': typeof authResetPasswordRoute
  '/$postId': typeof dashboardPostIdRoute
  '/follow': typeof dashboardFollowRoute
  '/search': typeof dashboardSearchRoute
  '/profile/$profileId': typeof dashboardProfileProfileIdRoute
  '/profile': typeof dashboardProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(dashboard)/$postId': typeof dashboardPostIdRoute
  '/(dashboard)/follow': typeof dashboardFollowRoute
  '/(dashboard)/search': typeof dashboardSearchRoute
  '/(dashboard)/profile/$profileId': typeof dashboardProfileProfileIdRoute
  '/(dashboard)/profile/': typeof dashboardProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/$postId'
    | '/follow'
    | '/search'
    | '/profile/$profileId'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/$postId'
    | '/follow'
    | '/search'
    | '/profile/$profileId'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(dashboard)'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(auth)/reset-password'
    | '/(dashboard)/$postId'
    | '/(dashboard)/follow'
    | '/(dashboard)/search'
    | '/(dashboard)/profile/$profileId'
    | '/(dashboard)/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(dashboard)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/register",
        "/(auth)/reset-password"
      ]
    },
    "/(dashboard)": {
      "filePath": "(dashboard)/route.tsx",
      "children": [
        "/(dashboard)/$postId",
        "/(dashboard)/follow",
        "/(dashboard)/search",
        "/(dashboard)/profile/$profileId",
        "/(dashboard)/profile/"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/reset-password": {
      "filePath": "(auth)/reset-password.tsx",
      "parent": "/(auth)"
    },
    "/(dashboard)/$postId": {
      "filePath": "(dashboard)/$postId.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/follow": {
      "filePath": "(dashboard)/follow.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/search": {
      "filePath": "(dashboard)/search.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/profile/$profileId": {
      "filePath": "(dashboard)/profile/$profileId.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/profile/": {
      "filePath": "(dashboard)/profile/index.tsx",
      "parent": "/(dashboard)"
    }
  }
}
ROUTE_MANIFEST_END */
